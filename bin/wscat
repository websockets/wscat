#!/usr/bin/env node

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var program = require('commander')
  , readline = require('readline')
  , events = require('events')
  , WebSocket = require('ws')
  , util = require('util')
  , fs = require('fs');

var interval = null;
var messagesSent = 0;
var messagesReceived = 0;
var pingsSent = 0;
var pingsReceived = 0;
var pongsSent = 0;
var pongsReceived = 0;
var lastMessage = null;
var connectionStartTime;
var connectionEndTime;
function printCounts() {
  var currentTime = new Date()
  wsConsole.print('Connection Open for ' + (currentTime - connectionStartTime) + ' ms', Console.Colors.Green);
  wsConsole.print(messagesReceived + ' message(s) Received', Console.Colors.Green);
  wsConsole.print(messagesSent + ' message(s) Sent', Console.Colors.Green);
  wsConsole.print(pingsReceived + ' ping(s) Received', Console.Colors.Green);
  wsConsole.print(pingsSent + ' ping(s) Sent', Console.Colors.Green);
  wsConsole.print(pongsReceived + ' pong(s) Received', Console.Colors.Green);
  wsConsole.print(pongsSent + ' pong(s) Sent', Console.Colors.Green);
  if (lastMessage) {
    wsConsole.print('Last Message Received = ', Console.Colors.Green);
    wsConsole.print(lastMessage, Console.Colors.Default);
  }
}
function printCommands(){
  wsConsole.print('\'> send <message>\' to send <message> to server', Console.Colors.Green);
  wsConsole.print('\'> ping\' to send a ping to the server', Console.Colors.Green);
  wsConsole.print('\'> pong\' to send pong to the server', Console.Colors.Green);
  wsConsole.print('\'> close\' to gracefully close connection to the server', Console.Colors.Green);
  wsConsole.print('\'> last\' to reprint last received message', Console.Colors.Green);
  wsConsole.print('\'> counts\' to print frame counts', Console.Colors.Green);
}
function parseInput(data){
  if (program.parsecommands) {
    if (data.substring(0, 'send '.length) === 'send ') {
      ws.send(data.substring('send '.length, data.length), {
        mask: true
      });
      wsConsole.print('sent (' + data.substring('send '.length, data.length) + ')', Console.Colors.Green);
      messagesSent++;
    }
    if (data.substring(0, 'ping'.length) === 'ping') {
      ws.ping();
      pingsSent++;
      wsConsole.print('ping sent', Console.Colors.Green);
    }
    if (data.substring(0, 'pong'.length) === 'pong') {
      ws.pong();
      pongsSent++;
      wsConsole.print('pong sent', Console.Colors.Green);
    }
    if (data.substring(0, 'close'.length) === 'close') {
      ws.close(1001, 'Client Closing.');
      wsConsole.print('Connection Closed', Console.Colors.Green);
      printCounts();
      console.timeEnd('ConnectionLasted');
      process.exit();
    }
    if (data.substring(0, 'last'.length) === 'last') {
      if (lastMessage) {
        wsConsole.print('Last Message Recieved = ', Console.Colors.Green);
        wsConsole.print(lastMessage, Console.Colors.Default);
      }
    }
    if (data.substring(0, 'counts'.length) === 'counts') {
      printCounts();
    }
  } else {
    ws.send(data, {
      mask: true
    });
    messagesSent++;
  }
  wsConsole.prompt();
}
/**
 * InputReader - processes console input.
 */

function Console() {
  if (!(this instanceof Console)) return new Console();
  this.stdin = process.stdin;
  this.stdout = process.stdout;

  this.readlineInterface = readline.createInterface(this.stdin, this.stdout);

  var self = this;
  this.readlineInterface.on('line', function line(data) {
    self.emit('line', data);
  }).on('close', function close() {
    self.emit('close');
  });

  this._resetInput = function() {
    self.clear();
  };
}
util.inherits(Console, events.EventEmitter);

Console.Colors = {
  Red: '\033[31m',
  Green: '\033[32m',
  Yellow: '\033[33m',
  Blue: '\033[34m',
  Default: '\033[39m'
};

Console.prototype.prompt = function prompt() {
  this.readlineInterface.prompt();
};

Console.prototype.print = function print(msg, color) {
  this.clear();
  color = color || Console.Colors.Default;
  this.stdout.write(color + msg + Console.Colors.Default + '\n');
  this.prompt();
};

Console.prototype.clear = function clear() {
  this.stdout.write('\033[2K\033[E');
};

Console.prototype.pause = function pausing() {
  this.stdin.on('keypress', this._resetInput);
};

Console.prototype.resume = function resume() {
  this.stdin.removeListener('keypress', this._resetInput);
};

function appender(xs) {
  xs = xs || [];

  return function (x) {
    xs.push(x);
    return xs;
  };
}

function into(obj, kvals) {
  kvals.forEach(function (kv) {
    obj[kv[0]] = kv[1];
  });

  return obj;
}

function splitOnce(sep, str) { // sep can be either String or RegExp
  var tokens = str.split(sep);
  return [tokens[0], str.replace(sep, '').substr(tokens[0].length)];
}

/**
 * The actual application
 */
var version = require('../package.json').version;

program
  .version(version)
  .usage('[options] (--listen <port> | --connect <url>)')
  .option('-l, --listen <port>', 'listen on port')
  .option('-c, --connect <url>', 'connect to a websocket server')
  .option('-p, --protocol <version>', 'optional protocol version')
  .option('-o, --origin <origin>', 'optional origin')
  .option('--host <host>', 'optional host')
  .option('-s, --subprotocol <protocol>', 'optional subprotocol')
  .option('-n, --no-check', 'Do not check for unauthorized certificates')
  .option('-H, --header <header:value>', 'Set an HTTP header. Repeat to set multiple. (--connect only)', appender(), [])
  .option('--auth <username:password>', 'Add basic HTTP authentication header. (--connect only)')
  .option('-k, --keepalive <interval>', 'send a ping every interval seconds')
  .option('-P, --parsecommands', 'parse input for commands (send, ping, pong, close, etc.)')
  .parse(process.argv);

if (program.listen && program.connect) {
  console.error('\033[33merror: use either --listen or --connect\033[39m');
  process.exit(-1);
} else if (program.listen) {
  var wsConsole = new Console();
  wsConsole.pause();

  var options = {};

  if (program.protocol) options.protocolVersion = program.protocol;
  if (program.origin) options.origin = program.origin;
  if (program.subprotocol) options.protocol = program.subprotocol;
  if (!program.check) options.rejectUnauthorized = program.check;

  var ws = null;
  var wss = new WebSocket.Server({ port: program.listen }, function listening() {
    wsConsole.print('listening on port ' + program.listen + ' (press CTRL+C to quit)', Console.Colors.Green);
    if (program.parsecommands) {
      printCommands();
    }
    wsConsole.clear();
  });

  wsConsole.on('close', function close() {
    try { ws.close(); }
    catch (e) {}

    process.exit(0);
  });

  wsConsole.on('line', parseInput);
  wss.on('connection', function(newClient) {
    if (ws) {
      // limit to one client
      newClient.terminate();
      return;
    };
    ws = newClient;
    wsConsole.resume();
    wsConsole.prompt();
    wsConsole.print('client connected', Console.Colors.Green);
    console.time('ConnectionLasted');
    connectionStartTime = new Date();
    if (program.keepalive) {
      interval = setInterval(function() {
        ws.ping();
        pingsSent++;
        wsConsole.print('ping sent', Console.Colors.Green);
      }, program.keepalive);
    }
    ws.on('close', function close() {
      wsConsole.print('disconnected', Console.Colors.Green);
      printCounts();
      console.timeEnd('ConnectionLasted');

      if (interval != null) {
        clearInterval(interval);
      }
      wsConsole.clear();
      wsConsole.pause();
      ws = null;
    }).on('error', function(code, description) {
      wsConsole.print('error: ' + code + (description ? ' ' + description : ''), Console.Colors.Yellow);
    }).on('message', function message(data, flags) {
      lastMessage = data;
      wsConsole.print('< ' + data, Console.Colors.Default);
      messagesReceived++;
    }).on('pong', function(data, flags) {
      pongsReceived++;
      wsConsole.print('pong Received', Console.Colors.Green);
    }).on('ping', function(data, flags) {
      pingsReceived++;
      pongsSent++;
      ws.pong();
      wsConsole.print('pong sent', Console.Colors.Green);
    });
  }).on('error', function servererrror(error) {
    wsConsole.print('error: ' + error.toString(), Console.Colors.Yellow);
    process.exit(-1);
  });
} else if (program.connect) {
  var wsConsole = new Console();
  var options = {};
  if (program.protocol) options.protocolVersion = program.protocol;
  if (program.origin) options.origin = program.origin;
  if (program.subprotocol) options.protocol = program.subprotocol;
  if (program.host) options.host = program.host;
  if (!program.check) options.rejectUnauthorized = program.check;

  var headers = into({}, (program.header || []).map(function split(s) {
    return splitOnce(':', s);
  }));

  if (program.auth) {
    headers.Authorization = 'Basic '+ new Buffer(program.auth).toString('base64');
  }

  var connectUrl = program.connect;
  if (!connectUrl.match(/\w+:\/\/.*$/i)) {
    connectUrl = 'ws://' + connectUrl;
  }

  options.headers = headers;
  var ws = new WebSocket(connectUrl, options);

  ws.on('open', function open() {
    console.time('ConnectionLasted');
    connectionStartTime = new Date();
    if (program.keepalive) {
      interval = setInterval(function() {
        ws.ping();
        pingsSent++;
        wsConsole.print('ping sent', Console.Colors.Green);
      }, program.keepalive);
    }
    wsConsole.print('connected (press CTRL+C to terminate)', Console.Colors.Green);
    if (program.parsecommands) {
      printCommands();
    }
    wsConsole.on('line', parseInput);
  }).on('close', function close() {
    wsConsole.print('disconnected', Console.Colors.Green);
    printCounts();
    console.timeEnd('ConnectionLasted');
    if (interval != null) {
      clearInterval(interval);
    }
    wsConsole.clear();
    process.exit();

  }).on('error', function error(code, description) {
    printCounts();
    wsConsole.print('error: ' + code + (description ? ' ' + description : ''), Console.Colors.Yellow);
    process.exit(-1);
  }).on('message', function message(data, flags) {
    messagesReceived++;
    lastMessage = data;
    wsConsole.print('< ' + data, Console.Colors.Default);
  }).on('pong', function pong(data, flags) {
    pongsReceived++;
    wsConsole.print('pong Received', Console.Colors.Green);
  }).on('ping', function ping(data, flags) {
    pingsReceived++;
    pongsSent++;
    ws.pong();
    wsConsole.print('pong sent', Console.Colors.Green);
  });
  wsConsole.on('close', function close() {
    printCounts();
    if (!ws) return;

    try { ws.close(); }
    catch(e) {}

    process.exit();
});
} else {
  program.help();
}
